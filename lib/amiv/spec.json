  {
  "api_name": "API",
  "domains": {
    "events": {
      "paths": {
        "/events/{_id}": {
          "DELETE": {
            "label": "Delete a Event",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Event",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a Event",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "nullable": true,
                "maxlength": 500,
                "type": "string",
                "required": false,
                "name": "catchphrase_de"
              },
              {
                "nullable": true,
                "maxlength": 500,
                "type": "string",
                "required": false,
                "name": "catchphrase_en"
              },
              {
                "nullable": true,
                "maxlength": 50,
                "type": "string",
                "required": false,
                "name": "location"
              },
              {
                "nullable": true,
                "required": false,
                "later_than": "time_start",
                "dependencies": [
                  "time_start"
                ],
                "name": "time_end",
                "type": "datetime"
              },
              {
                "readonly": true,
                "type": "integer",
                "required": false,
                "name": "signup_count"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": true,
                "name": "show_announce"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": true,
                "name": "show_infoscreen"
              },
              {
                "nullable": true,
                "type": "integer",
                "required": true,
                "min": 0,
                "requires_if_not_null": [
                  "time_register_start",
                  "time_register_end",
                  "allow_email_signup"
                ],
                "name": "spots"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "required": false,
                "dependencies": [
                  "catchphrase_de",
                  "description_de"
                ],
                "name": "title_de",
                "type": "string"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "required": false,
                "dependencies": [
                  "catchphrase_en",
                  "description_en"
                ],
                "name": "title_en",
                "type": "string"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_poster"
              },
              {
                "nullable": true,
                "min": 0,
                "type": "integer",
                "required": false,
                "name": "price"
              },
              {
                "nullable": true,
                "maxlength": 10000,
                "type": "string",
                "required": false,
                "name": "description_de"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_banner"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_thumbnail"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": false,
                "depends_any": [
                  "title_de",
                  "title_en"
                ],
                "required": true,
                "name": "show_website",
                "type": "boolean"
              },
              {
                "nullable": true,
                "only_if_not_null": "spots",
                "type": "json_schema",
                "required": false,
                "name": "additional_fields"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_start"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_register_start"
              },

              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_advertising_start"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_advertising_end"
              },


              {
                "nullable": true,
                "maxlength": 10000,
                "type": "string",
                "required": false,
                "name": "description_en"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": false,
                "name": "allow_email_signup"
              },
              {
                "nullable": true,
                "required": false,
                "later_than": "time_register_start",
                "dependencies": [
                  "time_register_start"
                ],
                "name": "time_register_end",
                "type": "datetime"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_infoscreen"
              }
            ]
          }
        },
        "/events": {
          "GET": {
            "label": "Retrieve all events",
            "params": []
          },
          "POST": {
            "label": "Create a Event",
            "params": [
              {
                "nullable": true,
                "maxlength": 500,
                "type": "string",
                "required": false,
                "name": "catchphrase_de"
              },
              {
                "nullable": true,
                "maxlength": 500,
                "type": "string",
                "required": false,
                "name": "catchphrase_en"
              },
              {
                "nullable": true,
                "maxlength": 50,
                "type": "string",
                "required": false,
                "name": "location"
              },
              {
                "nullable": true,
                "required": false,
                "later_than": "time_start",
                "dependencies": [
                  "time_start"
                ],
                "name": "time_end",
                "type": "datetime"
              },
              {
                "readonly": true,
                "type": "integer",
                "required": false,
                "name": "signup_count"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": true,
                "name": "show_announce"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": true,
                "name": "show_infoscreen"
              },
              {
                "nullable": true,
                "type": "integer",
                "required": true,
                "min": 0,
                "requires_if_not_null": [
                  "time_register_start",
                  "time_register_end",
                  "allow_email_signup"
                ],
                "name": "spots"
              },

              {
                "nullable": true,
                "type": "integer",
                "required": false,
                "min": 0,
                "max": 10,
                "name": "priority"
              },

              {
                "nullable": true,
                "maxlength": 100,
                "required": false,
                "dependencies": [
                  "catchphrase_de",
                  "description_de"
                ],
                "name": "title_de",
                "type": "string"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "required": false,
                "dependencies": [
                  "catchphrase_en",
                  "description_en"
                ],
                "name": "title_en",
                "type": "string"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_poster"
              },
              {
                "nullable": true,
                "min": 0,
                "type": "integer",
                "required": false,
                "name": "price"
              },
              {
                "nullable": true,
                "maxlength": 10000,
                "type": "string",
                "required": false,
                "name": "description_de"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_banner"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_thumbnail"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": false,
                "depends_any": [
                  "title_de",
                  "title_en"
                ],
                "required": true,
                "name": "show_website",
                "type": "boolean"
              },
              {
                "nullable": true,
                "only_if_not_null": "spots",
                "type": "json_schema",
                "required": false,
                "name": "additional_fields"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_start"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_register_start"
              },


              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_advertising_start"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_advertising_end"
              },


              {
                "nullable": true,
                "maxlength": 10000,
                "type": "string",
                "required": false,
                "name": "description_en"
              },
              {
                "nullable": false,
                "type": "boolean",
                "required": false,
                "name": "allow_email_signup"
              },
              {
                "nullable": true,
                "required": false,
                "later_than": "time_register_start",
                "dependencies": [
                  "time_register_start"
                ],
                "name": "time_register_end",
                "type": "datetime"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "img_infoscreen"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {
          "additional_fields": "must be provided in form of a JSON-Schema. You can add here fields you want to know from people signing up going further than their email-address",
          "spots": "For no limit, set to '0'. If no signup required, set to '-1'. Otherwise just provide an integer.",
          "allow_email_signup": "If False, only AMIV-Members can sign up for this event",
          "price": "Price of the event as Integer in Rappen."
        },
        "methods": {
          "GET": "You are always allowed, even without session, to view AMIV-Events"
        },
        "general": "An Event is basically everything happening in the AMIV. All time fields have the format YYYY-MM-DDThh:mmZ, e.g. 2014-12-20T11:50:06Z"
      }
    },
    "groups": {
      "paths": {
        "/groups": {
          "GET": {
            "label": "Retrieve all groups",
            "params": []
          },
          "POST": {
            "label": "Create a Group",
            "params": [
              {
                "type": "list",
                "required": false,
                "unique_elements": true,
                "schema": {
                  "regex": "^.+@.+$",
                  "maxlength": 100,
                  "type": "string"
                },
                "name": "forward_to"
              },
              {
                "nullable": true,
                "propertyschema": {
                  "api_resources": true,
                  "type": "string"
                },
                "valueschema": {
                  "allowed": [
                    "read",
                    "readwrite"
                  ],
                  "type": "string"
                },
                "required": false,
                "name": "permissions",
                "type": "dict"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": true,
                "type": "objectid",
                "required": false,
                "data_relation": {
                  "field": "_id",
                  "resource": "users"
                },
                "name": "moderator"
              },
              {
                "unique_elements_for_resource": true,
                "required": false,
                "name": "receive_from",
                "unique_elements": true,
                "schema": {
                  "regex": "[a-z0-9_\\.-]+",
                  "maxlength": 100,
                  "type": "string"
                },
                "type": "list"
              },
              {
                "type": "boolean",
                "required": false,
                "default": false,
                "name": "allow_self_enrollment"
              },
              {
                "type": "boolean",
                "required": false,
                "default": false,
                "name": "has_zoidberg_share"
              },
              {
                "maxlength": 100,
                "unique": true,
                "type": "string",
                "required": true,
                "empty": false,
                "name": "name"
              }
            ]
          }
        },
        "/groups/{_id}": {
          "DELETE": {
            "label": "Delete a Group",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Group",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a Group",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "type": "list",
                "required": false,
                "unique_elements": true,
                "schema": {
                  "regex": "^.+@.+$",
                  "maxlength": 100,
                  "type": "string"
                },
                "name": "forward_to"
              },
              {
                "nullable": true,
                "propertyschema": {
                  "api_resources": true,
                  "type": "string"
                },
                "valueschema": {
                  "allowed": [
                    "read",
                    "readwrite"
                  ],
                  "type": "string"
                },
                "required": false,
                "name": "permissions",
                "type": "dict"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": true,
                "type": "objectid",
                "required": false,
                "data_relation": {
                  "field": "_id",
                  "resource": "users"
                },
                "name": "moderator"
              },
              {
                "unique_elements_for_resource": true,
                "required": false,
                "name": "receive_from",
                "unique_elements": true,
                "schema": {
                  "regex": "[a-z0-9_\\.-]+",
                  "maxlength": 100,
                  "type": "string"
                },
                "type": "list"
              },
              {
                "type": "boolean",
                "required": false,
                "default": false,
                "name": "allow_self_enrollment"
              },
              {
                "type": "boolean",
                "required": false,
                "default": false,
                "name": "has_zoidberg_share"
              },
              {
                "maxlength": 100,
                "unique": true,
                "type": "string",
                "required": true,
                "empty": false,
                "name": "name"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {
          "permissions": "permissions the group grants. has to be according to the jsonschema available at /notyetavailable",
          "allow_self_enrollment": "If true, the group can be seen by all users and they can subscribe themselves",
          "has_zoidberg_share": "If the group has a share in the amiv storage"
        },
        "general": "This resource describes the different teams in AMIV.A group can grant API permissions and can be reached with several addresses. To see the addresses of this group, see /groupaddressesTo see the members, have a look at '/groupmembers'. To see the addresses messages are forwarded to, see /groupforwards"
      }
    },
    "sessions": {
      "paths": {
        "/sessions": {
          "DELETE": {
            "label": "Delete all sessions",
            "params": []
          },
          "GET": {
            "label": "Retrieve all sessions",
            "params": []
          },
          "POST": {
            "label": "Create a Session",
            "params": [
              {
                "nullable": false,
                "empty": false,
                "required": true,
                "name": "username",
                "type": "string"
              },
              {
                "readonly": true,
                "type": "objectid",
                "required": false,
                "data_relation": {
                  "cascade_delete": true,
                  "field": "_id",
                  "embeddable": true,
                  "resource": "users"
                },
                "name": "user"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "readonly": true,
                "type": "string",
                "required": false,
                "name": "token"
              },
              {
                "nullable": false,
                "empty": false,
                "required": true,
                "name": "password",
                "type": "string"
              }
            ]
          }
        },
        "/sessions/{_id}": {
          "DELETE": {
            "label": "Delete a Session",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Session",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          }
        }
      },
      "description": {
        "methods": {
          "GET": "Check token(s).",
          "POST": "Login and aquire a login token. Post the fields 'username' and 'password', the response will contain the token. username can be either nethz, mail, or user_id"
        },
        "general": "A session is used to authenticate a user after he  provided login data. A POST to /session will return a token you can use in an Authorization header: token <yourtoken>"
      }
    },
    "joboffers": {
      "paths": {
        "/joboffers/{_id}": {
          "DELETE": {
            "label": "Delete a Joboffer",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Joboffer",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a Joboffer",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "description_en"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "pdf"
                ],
                "name": "pdf"
              },
              {
                "nullable": true,
                "maxlength": 30,
                "type": "string",
                "depends_any": [
                  "title_de",
                  "title_en"
                ],
                "required": true,
                "name": "company"
              },
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "title_de"
              },
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "title_en"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_end"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "logo"
              },
              {
                "nullable": true,
                "unique": false,
                "type": "string",
                "required": false,
                "name": "description_de"
              }
            ]
          }
        },
        "/joboffers": {
          "GET": {
            "label": "Retrieve all joboffers",
            "params": []
          },
          "POST": {
            "label": "Create a Joboffer",
            "params": [
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "description_en"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "pdf"
                ],
                "name": "pdf"
              },
              {
                "nullable": true,
                "maxlength": 30,
                "type": "string",
                "depends_any": [
                  "title_de",
                  "title_en"
                ],
                "required": true,
                "name": "company"
              },
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "title_de"
              },
              {
                "nullable": true,
                "type": "string",
                "required": false,
                "name": "title_en"
              },
              {
                "nullable": true,
                "type": "datetime",
                "required": false,
                "name": "time_end"
              },
              {
                "type": "media",
                "required": false,
                "filetype": [
                  "png",
                  "jpeg"
                ],
                "name": "logo"
              },
              {
                "nullable": true,
                "unique": false,
                "type": "string",
                "required": false,
                "name": "description_de"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {},
        "general": "A Job Offer posts repositoryUsers can post a job offer with the necessarycontent to fill out a job offer advertisement"
      }
    },
    "studydocuments": {
      "paths": {
        "/studydocuments": {
          "DELETE": {
            "label": "Delete all studydocuments",
            "params": []
          },
          "GET": {
            "label": "Retrieve all studydocuments",
            "params": []
          },
          "POST": {
            "label": "Create a Studydocument",
            "params": [
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "lecture"
              },
              {
                "nullable": true,
                "type": "integer",
                "required": false,
                "name": "semester"
              },
              {
                "type": "list",
                "required": true,
                "schema": {
                  "type": "media"
                },
                "name": "files"
              },
              {
                "nullable": true,
                "maxlength": 4,
                "type": "string",
                "required": false,
                "name": "department"
              },
              {
                "nullable": true,
                "maxlength": 5,
                "type": "string",
                "required": false,
                "name": "coursesemester"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "professor"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "author"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "name"
              },
              {
                "nullable": true,
                "readonly": true,
                "data_relation": {
                  "field": "_id",
                  "resource": "users"
                },
                "required": false,
                "name": "uploader",
                "type": "objectid"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": true,
                "maxlength": 30,
                "type": "string",
                "required": false,
                "name": "type"
              }
            ]
          }
        },
        "/studydocuments/{_id}": {
          "DELETE": {
            "label": "Delete a Studydocument",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Studydocument",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a Studydocument",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "lecture"
              },
              {
                "nullable": true,
                "type": "integer",
                "required": false,
                "name": "semester"
              },
              {
                "type": "list",
                "required": true,
                "schema": {
                  "type": "media"
                },
                "name": "files"
              },
              {
                "nullable": true,
                "maxlength": 4,
                "type": "string",
                "required": false,
                "name": "department"
              },
              {
                "nullable": true,
                "maxlength": 5,
                "type": "string",
                "required": false,
                "name": "coursesemester"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "professor"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "author"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "name": "name"
              },
              {
                "nullable": true,
                "readonly": true,
                "data_relation": {
                  "field": "_id",
                  "resource": "users"
                },
                "required": false,
                "name": "uploader",
                "type": "objectid"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": true,
                "maxlength": 30,
                "type": "string",
                "required": false,
                "name": "type"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {
          "author": "Original author of the uploaded files(Prof, Assistant, copyright owner)",
          "semester": "Study-Semester as an Integer starting with first semester Bachelor.",
          "uploader": "Read-only field describing which AMIV member uploaded the files",
          "coursesemester": "Course Semester as Enum(HS/FS)+Integer"
        },
        "general": "Study-documents are basically all documents that are connected to a course. All metadata is optional and intended to help finding the file. There are no strict categories, as those do not work well for courses available to many departements and aiming at all levels of experience."
      }
    },
    "users": {
      "paths": {
        "/users/{nethz}": {
          "GET": {
            "label": "Retrieve a User",
            "params": [
              {
                "nullable": true,
                "maxlength": 30,
                "default": null,
                "unique": true,
                "type": "string",
                "required": false,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "nethz"
              }
            ]
          }
        },
        "/users/{_id}": {
          "DELETE": {
            "label": "Delete a User",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a User",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a User",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "nullable": true,
                "maxlength": 30,
                "default": null,
                "unique": true,
                "type": "string",
                "required": false,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "nethz"
              },
              {
                "maxlength": 100,
                "unique": true,
                "type": "string",
                "required": true,
                "regex": "^.+@.+$",
                "name": "email"
              },
              {
                "nullable": true,
                "empty": false,
                "maxlength": 20,
                "required": false,
                "name": "phone",
                "type": "string"
              },
              {
                "not_patchable_unless_admin": true,
                "allowed": [
                  "male",
                  "female"
                ],
                "unique": false,
                "type": "string",
                "required": true,
                "maxlength": 6,
                "name": "gender"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": false,
                "maxlength": 50,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "firstname"
              },
              {
                "nullable": true,
                "maxlength": 8,
                "unique": true,
                "type": "string",
                "required": false,
                "not_patchable_unless_admin": true,
                "name": "legi"
              },
              {
                "nullable": true,
                "not_patchable_unless_admin": true,
                "required": false,
                "allowed": [
                  "itet",
                  "mavt"
                ],
                "name": "department",
                "type": "string"
              },
              {
                "nullable": true,
                "type": "boolean",
                "required": false,
                "name": "send_newsletter"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "default": null,
                "type": "string",
                "required": false,
                "empty": false,
                "name": "password"
              },
              {
                "nullable": false,
                "maxlength": 50,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "lastname"
              },
              {
                "maxlength": 13,
                "allowed": [
                  "none",
                  "regular",
                  "extraordinary",
                  "honorary"
                ],
                "unique": false,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "name": "membership"
              },
              {
                "nullable": true,
                "maxlength": 6,
                "unique": true,
                "type": "string",
                "required": false,
                "empty": false,
                "name": "rfid"
              }
            ]
          }
        },
        "/users": {
          "GET": {
            "label": "Retrieve all users",
            "params": []
          },
          "POST": {
            "label": "Create a User",
            "params": [
              {
                "nullable": true,
                "maxlength": 30,
                "default": null,
                "unique": true,
                "type": "string",
                "required": false,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "nethz"
              },
              {
                "maxlength": 100,
                "unique": true,
                "type": "string",
                "required": true,
                "regex": "^.+@.+$",
                "name": "email"
              },
              {
                "nullable": true,
                "empty": false,
                "maxlength": 20,
                "required": false,
                "name": "phone",
                "type": "string"
              },
              {
                "not_patchable_unless_admin": true,
                "allowed": [
                  "male",
                  "female"
                ],
                "unique": false,
                "type": "string",
                "required": true,
                "maxlength": 6,
                "name": "gender"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": false,
                "maxlength": 50,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "firstname"
              },
              {
                "nullable": true,
                "maxlength": 8,
                "unique": true,
                "type": "string",
                "required": false,
                "not_patchable_unless_admin": true,
                "name": "legi"
              },
              {
                "nullable": true,
                "not_patchable_unless_admin": true,
                "required": false,
                "allowed": [
                  "itet",
                  "mavt"
                ],
                "name": "department",
                "type": "string"
              },
              {
                "nullable": true,
                "type": "boolean",
                "required": false,
                "name": "send_newsletter"
              },
              {
                "nullable": true,
                "maxlength": 100,
                "default": null,
                "type": "string",
                "required": false,
                "empty": false,
                "name": "password"
              },
              {
                "nullable": false,
                "maxlength": 50,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "empty": false,
                "name": "lastname"
              },
              {
                "maxlength": 13,
                "allowed": [
                  "none",
                  "regular",
                  "extraordinary",
                  "honorary"
                ],
                "unique": false,
                "type": "string",
                "required": true,
                "not_patchable_unless_admin": true,
                "name": "membership"
              },
              {
                "nullable": true,
                "maxlength": 6,
                "unique": true,
                "type": "string",
                "required": false,
                "empty": false,
                "name": "rfid"
              }
            ]
          }
        }
      },
      "description": {
        "methods": {
          "GET": "Authorization is required for most of the fields"
        },
        "general": "In general, the user data will be generated from LDAP-Data. However, one might change the RFID-Number or the membership-status. Extraordinary members may not have a LDAP-Account and can therefore access all given fields."
      }
    },
    "purchases": {
      "paths": {
        "/purchases": {
          "GET": {
            "label": "Retrieve all purchases",
            "params": []
          },
          "POST": {
            "label": "Create a Purchase",
            "params": [
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "nullable": false,
                "unique": false,
                "required": true,
                "name": "timestamp",
                "type": "datetime"
              },
              {
                "nullable": false,
                "not_patchable_unless_admin": true,
                "allowed": [
                  "beer",
                  "coffee"
                ],
                "unique": false,
                "type": "string",
                "required": true,
                "maxlength": 6,
                "name": "product"
              },
              {
                "nullable": false,
                "data_relation": {
                  "field": "_id",
                  "embeddable": true,
                  "resource": "users"
                },
                "unique": false,
                "type": "objectid",
                "required": true,
                "name": "user"
              }
            ]
          }
        },
        "/purchases/{_id}": {
          "GET": {
            "label": "Retrieve a Purchase",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {},
        "general": "A beer machine or kaffi machine transaction. Users should be able to get beer or kaffi, if their last timestamp is older than one day and they are AMIV members. This resource is used to log their purchases."
      }
    },
    "groupmemberships": {
      "paths": {
        "/groupmemberships": {
          "GET": {
            "label": "Retrieve all groupmemberships",
            "params": []
          },
          "POST": {
            "label": "Create a Groupmembership",
            "params": [
              {
                "self_enrollment_required": true,
                "data_relation": {
                  "cascade_delete": true,
                  "field": "_id",
                  "embeddable": true,
                  "resource": "groups"
                },
                "required": true,
                "name": "group",
                "type": "objectid"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "data_relation": {
                  "cascade_delete": true,
                  "field": "_id",
                  "embeddable": true,
                  "resource": "users"
                },
                "type": "objectid",
                "required": true,
                "only_self_or_moderator": true,
                "unique_combination": [
                  "group"
                ],
                "name": "user"
              }
            ]
          }
        },
        "/groupmemberships/{_id}": {
          "DELETE": {
            "label": "Delete a Groupmembership",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Groupmembership",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          }
        }
      },
      "description": {
        "general": "Assignment of registered users to groups."
      }
    },
    "eventsignups": {
      "paths": {
        "/eventsignups": {
          "GET": {
            "label": "Retrieve all eventsignups",
            "params": []
          },
          "POST": {
            "label": "Create a Eventsignup",
            "params": [
              {
                "nullable": true,
                "type": "json_event_field",
                "required": false,
                "name": "additional_fields"
              },
              {
                "nullable": false,
                "email_signup_must_be_allowed": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "regex": "^.+@.+$",
                "not_patchable": true,
                "name": "email"
              },
              {
                "nullable": true,
                "readonly": true,
                "type": "boolean",
                "required": false,
                "name": "confirmed"
              },
              {
                "nullable": false,
                "data_relation": {
                  "field": "_id",
                  "embeddable": true,
                  "resource": "users"
                },
                "type": "objectid",
                "only_self_enrollment_for_event": true,
                "required": false,
                "not_patchable": true,
                "name": "user"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "data_relation": {
                  "field": "_id",
                  "embeddable": true,
                  "resource": "events"
                },
                "signup_requirements": true,
                "type": "objectid",
                "required": true,
                "not_patchable": true,
                "unique_combination": [
                  "user",
                  "email"
                ],
                "name": "event"
              }
            ]
          }
        },
        "/eventsignups/{_id}": {
          "DELETE": {
            "label": "Delete a Eventsignup",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "GET": {
            "label": "Retrieve a Eventsignup",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              }
            ]
          },
          "PATCH": {
            "label": "Update a Eventsignup",
            "params": [
              {
                "type": "string",
                "required": true,
                "name": "_id"
              },
              {
                "nullable": true,
                "type": "json_event_field",
                "required": false,
                "name": "additional_fields"
              },
              {
                "nullable": false,
                "email_signup_must_be_allowed": true,
                "maxlength": 100,
                "type": "string",
                "required": false,
                "regex": "^.+@.+$",
                "not_patchable": true,
                "name": "email"
              },
              {
                "nullable": true,
                "readonly": true,
                "type": "boolean",
                "required": false,
                "name": "confirmed"
              },
              {
                "nullable": false,
                "data_relation": {
                  "field": "_id",
                  "embeddable": true,
                  "resource": "users"
                },
                "type": "objectid",
                "only_self_enrollment_for_event": true,
                "required": false,
                "not_patchable": true,
                "name": "user"
              },
              {
                "type": "objectid",
                "required": false,
                "name": "_id"
              },
              {
                "data_relation": {
                  "field": "_id",
                  "embeddable": true,
                  "resource": "events"
                },
                "signup_requirements": true,
                "type": "objectid",
                "required": true,
                "not_patchable": true,
                "unique_combination": [
                  "user",
                  "email"
                ],
                "name": "event"
              }
            ]
          }
        }
      },
      "description": {
        "fields": {
          "additional_fields": "Data-schema depends on 'additional_fields' from the mapped event. Please provide in json-format.",
          "email": "For registered users, this is just a projection of your general email-address. External users need to provide their email here.",
          "user": "Provide either user or email."
        },
        "methods": {
          "PATCH": "Only additional_fields can be changed"
        },
        "general": "You can signup here for an existing event inside of the registration-window. External Users can only sign up to public events."
      }
    }
  },
  "base": "http:///",
  "server_name": null
}