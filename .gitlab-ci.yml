stages:
  - test
  - build
  - deploy

eslint:
  stage: test
  image: node:latest
  before_script:
   - npm install
  script:
   - npm run lint

build_master_dev:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --build-arg NPM_BUILD_COMMAND=build-dev --pull -t "$CI_REGISTRY_IMAGE:dev" ./
    - docker push "$CI_REGISTRY_IMAGE:dev"
  environment:
    name: production
    url: https://admin-dev.amiv.ethz.ch
  only:
    - master

build_master_prod:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" ./
    - docker push "$CI_REGISTRY_IMAGE"
  environment:
    name: production
    url: https://admin.amiv.ethz.ch
  only:
    - master

# On branches except master: verify that build works, do not push to registry
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build --pull ./
  except:
    - master

deploy_dev_cluster:
  stage: deploy
  image: amiveth/service-update-helper
  before_script:
    - export CI_DEPLOY_SERVICE="$CI_DEPLOY_SERVICE_DEV"
  script:
    - /update.py
  only:
    - master

deploy_prod_cluster:
  stage: deploy
  image: amiveth/service-update-helper
  before_script:
    - export CI_DEPLOY_SERVICE="$CI_DEPLOY_SERVICE_PROD"
  script:
    - /update.py
  only:
    - master

deploy_prod_pazuzu:
  stage: deploy
  image: amiveth/service-update-helper
  before_script:
    - export CI_DEPLOY_URL="$CI_DEPLOY_URL_PAZUZU"
    - export CI_DEPLOY_SERVICE="$CI_DEPLOY_SERVICE_PROD"
  script:
    - /update.py
  only:
    - master
